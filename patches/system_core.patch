diff --git a/1system_core.patch b/1system_core.patch
new file mode 100644
index 0000000..e69de29
diff --git a/init/init.cpp b/init/init.cpp
index 7a37059..6e00029 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -85,7 +85,7 @@ int have_console;
 std::string console_name = "/dev/console";
 static time_t process_needs_restart;
 
-const char *ENV[32];
+const char *ENV[64];
 
 bool waiting_for_exec = false;
 
@@ -439,25 +439,18 @@ static void selinux_init_all_handles(void)
     selinux_android_set_sehandle(sehandle);
     sehandle_prop = selinux_android_prop_context_handle();
 }
-
+#if 0
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
-    selinux_enforcing_status status = SELINUX_ENFORCING;
-
-    import_kernel_cmdline(false, [&](const std::string& key, const std::string& value, bool in_qemu) {
-        if (key == "androidboot.selinux" && value == "permissive") {
-            status = SELINUX_PERMISSIVE;
-        }
-    });
 
     return status;
 }
-
+#endif
 static bool selinux_is_enforcing(void)
 {
     if (ALLOW_PERMISSIVE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+       return false; //  return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
 }
diff --git a/init/init.h b/init/init.h
index 345d442..f93d0c5 100644
--- a/init/init.h
+++ b/init/init.h
@@ -24,7 +24,7 @@ class Service;
 
 #define COMMAND_RETRY_TIMEOUT 5
 
-extern const char *ENV[32];
+extern const char *ENV[64];
 extern bool waiting_for_exec;
 extern int have_console;
 extern std::string console_name;
diff --git a/init/service.cpp b/init/service.cpp
index 8127e70..cdbb8c6 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -371,13 +371,15 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
+#if 0
         if (rc == 0 && scon == mycon) {
             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
             free(mycon);
             free(fcon);
             return false;
         }
-        free(mycon);
+#endif     
+   free(mycon);
         free(fcon);
         if (rc < 0) {
             ERROR("could not get context while starting '%s'\n", name_.c_str());
diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
index a4bbf92..57f8a01 100644
--- a/libcutils/fs_config.c
+++ b/libcutils/fs_config.c
@@ -144,7 +144,8 @@ static const struct fs_path_config android_files[] = {
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    //{ 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
diff --git a/rootdir/init.usb.rc b/rootdir/init.usb.rc
index 915d159..0666e4d 100644
--- a/rootdir/init.usb.rc
+++ b/rootdir/init.usb.rc
@@ -15,7 +15,7 @@ on post-fs-data
 service adbd /sbin/adbd --root_seclabel=u:r:su:s0
     class core
     socket adbd stream 660 system system
-    disabled
+    #disabled
     seclabel u:r:adbd:s0
 
 # adbd on at boot in emulator
diff --git a/system_core.patch b/system_core.patch
new file mode 100644
index 0000000..497623a
--- /dev/null
+++ b/system_core.patch
@@ -0,0 +1,103 @@
+diff --git a/init/init.cpp b/init/init.cpp
+index 7a37059..6e00029 100755
+--- a/init/init.cpp
++++ b/init/init.cpp
+@@ -85,7 +85,7 @@ int have_console;
+ std::string console_name = "/dev/console";
+ static time_t process_needs_restart;
+ 
+-const char *ENV[32];
++const char *ENV[64];
+ 
+ bool waiting_for_exec = false;
+ 
+@@ -439,25 +439,18 @@ static void selinux_init_all_handles(void)
+     selinux_android_set_sehandle(sehandle);
+     sehandle_prop = selinux_android_prop_context_handle();
+ }
+-
++#if 0
+ enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
+ 
+ static selinux_enforcing_status selinux_status_from_cmdline() {
+-    selinux_enforcing_status status = SELINUX_ENFORCING;
+-
+-    import_kernel_cmdline(false, [&](const std::string& key, const std::string& value, bool in_qemu) {
+-        if (key == "androidboot.selinux" && value == "permissive") {
+-            status = SELINUX_PERMISSIVE;
+-        }
+-    });
+ 
+     return status;
+ }
+-
++#endif
+ static bool selinux_is_enforcing(void)
+ {
+     if (ALLOW_PERMISSIVE_SELINUX) {
+-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
++       return false; //  return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+     }
+     return true;
+ }
+diff --git a/init/init.h b/init/init.h
+index 345d442..f93d0c5 100644
+--- a/init/init.h
++++ b/init/init.h
+@@ -24,7 +24,7 @@ class Service;
+ 
+ #define COMMAND_RETRY_TIMEOUT 5
+ 
+-extern const char *ENV[32];
++extern const char *ENV[64];
+ extern bool waiting_for_exec;
+ extern int have_console;
+ extern std::string console_name;
+diff --git a/init/service.cpp b/init/service.cpp
+index 8127e70..cdbb8c6 100644
+--- a/init/service.cpp
++++ b/init/service.cpp
+@@ -371,13 +371,15 @@ bool Service::Start() {
+             scon = ret_scon;
+             free(ret_scon);
+         }
++#if 0
+         if (rc == 0 && scon == mycon) {
+             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
+             free(mycon);
+             free(fcon);
+             return false;
+         }
+-        free(mycon);
++#endif     
++   free(mycon);
+         free(fcon);
+         if (rc < 0) {
+             ERROR("could not get context while starting '%s'\n", name_.c_str());
+diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
+index a4bbf92..57f8a01 100644
+--- a/libcutils/fs_config.c
++++ b/libcutils/fs_config.c
+@@ -144,7 +144,8 @@ static const struct fs_path_config android_files[] = {
+     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
+ 
+     /* Support FIFO scheduling mode in SurfaceFlinger. */
+-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
++    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
++    //{ 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+ 
+     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
+     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
+diff --git a/rootdir/init.usb.rc b/rootdir/init.usb.rc
+index 915d159..0666e4d 100644
+--- a/rootdir/init.usb.rc
++++ b/rootdir/init.usb.rc
+@@ -15,7 +15,7 @@ on post-fs-data
+ service adbd /sbin/adbd --root_seclabel=u:r:su:s0
+     class core
+     socket adbd stream 660 system system
+-    disabled
++    #disabled
+     seclabel u:r:adbd:s0
+ 
+ # adbd on at boot in emulator
